name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Install dependencies
        run: npm ci
      - name: Build React app
        run: npm run build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: phippedersen/dockerized-frontend:latest
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Frontend to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Pull the latest frontend image
            docker pull phippedersen/dockerized-frontend:latest

            # Create the traefik network if it doesn't exist
            docker network create traefik-net || true

            # Create or update the docker-compose file
            cat > docker-compose.frontend.yml << EOL
            version: '3.9'
            services:
              frontend:
                image: phippedersen/dockerized-frontend:latest
                container_name: frontend-container
                networks:
                  - traefik-net
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.frontend.rule=PathPrefix(\`/\`)"
                  - "traefik.http.services.frontend.loadbalancer.server.port=80"

            networks:
              traefik-net:
                external: true
            EOL

            # Stop and remove the existing frontend container if it exists
            docker-compose -f docker-compose.frontend.yml down

            # Start the new frontend container
            docker-compose -f docker-compose.frontend.yml up -d

            # Clean up unused images
            docker image prune -f
